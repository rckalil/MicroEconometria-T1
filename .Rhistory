library("MASS")
library("cmdstanr")
install.packages('cmdstanr')
install.packages('cmdstanr')
install.package("cmdstanr")
install.packages('cmdstanr')
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library("MASS")
library("cmdstanr")
install_cmdstan()
library("MASS")
library("cmdstanr")
# setwd(paste("C:/Users/ezequ/OneDrive - Fundacao Getulio Vargas - FGV/Mentoria/",
"joint-models-in-stan", sep = ""))
sim_data <- function(N,
lambda,
rho_s,
cens_time,
beta,
gamma,
var_u,
var_z,
rho,
n_rep_obs){
times <- id <- long_out <- x_total <- vector()
beta_11 <- beta[1]
beta_12 <- beta[2]
beta_13 <- beta[3]
beta_21 <- beta[4]
gamma_1 <- gamma[1]
gamma_2 <- gamma[2]
gamma_3 <- gamma[3]
mu_u1 <- 0
mu_u2 <- 0
mu_u <- c(mu_u1,mu_u2)
var_u1 <- var_u[1]
var_u2 <- var_u[2]
var_u3 <- var_u[3]
sigma <- matrix(c(var_u1, sqrt(var_u1*var_u2)*rho,
sqrt(var_u1*var_u2)*rho, var_u2), 2)
bvn_u <- mvrnorm(N, mu = mu_u, Sigma = sigma)
u_1 <- bvn_u[,1]
u_2 <- bvn_u[,2]
u_3 <- rnorm(N, 0, sqrt(var_u3))
x <- rnorm(N, 0, 1)
###################
# Survival process
###################
# Simulating the times to event
v <- runif(N)
id_times <- c(1:N)
for(i in 1:N){
haz <- function(s) {
lres <- log(lambda) + log(rho_s) + (rho_s-1)*log(s) + beta_21*x[i] +
gamma_1*u_1[i] + gamma_2*u_2[i] + gamma_3*(u_1[i] + u_2[i]*s) +
u_3[i]
return(exp(lres))
}
cum_haz <- function(t) {
res <- integrate(haz, 0, t)$value
return(res)
}
sv <- function(t) (exp(-cum_haz(t)) - v[i])^2
times[i] <- optim(1, sv, lower = 1e-6, upper = Inf, method = "L-BFGS-B")$par
}
status <- as.vector(times < cens_time)
times <- as.vector(ifelse(status, times, cens_time))
status <- as.numeric(status) # Censoring indicators (1=Observed, 0=Censored)
##############################
# Longitudinal process
##############################
obs_times_out <- vector()
for(i in 1:N){
# number of repeated observations for each individual
obs_times <- seq(0, times[i], by = n_rep_obs)
x_t <- rep(x[i], length(obs_times))
x_total <- c(x_total, x_t)
z = rnorm(length(obs_times), 0, sqrt(var_z))
y_t <- beta_11 + beta_12*obs_times + beta_13*rep(x[i], length(obs_times)) +
rep(u_1[i], length(obs_times)) + rep(u_2[i], length(obs_times))*
obs_times + z
long_out <- c(long_out, y_t)
id <- c(id,rep(i, length(obs_times)))
obs_times_out <- c(obs_times_out, obs_times)
}
#---------------------------------------------------------------------
# Creating the longitudinal and survival processes object
#---------------------------------------------------------------------
N <- length(id_times)                # number of subjects
n_obs <- length(long_out)            # total number of observations
x <- as.matrix(x,1)                  # unique x
obs_times <- obs_times_out           # visit times for repeated observations
y <- long_out                        # longitudinal outcomes
ind_unc_times <- which(status==1)    # uncensored times indicator
n_unc_times <- length(ind_unc_times) # number of uncensored times
long_data <- list(y=y,
N=N,
n_obs=n_obs,
x=x,
id=id,
obs_times=obs_times)
event_data <- list(N=N,
x=x,
times=times,
ind_unc_times=ind_unc_times,
n_unc_times=n_unc_times)
joint_data <- list(N=N,
n_obs=n_obs,
y=y,
id=id,
obs_times=obs_times,
x=x,
times=times,
ind_unc_times=ind_unc_times,
n_unc_times=n_unc_times)
save(long_data, file = "data/long_data.RData")
save(event_data, file = "data/event_data.RData")
save(joint_data, file = "data/joint_data.RData")
}
View(sim_data)
set.seed(25072023)
setwd(paste("C:/Users/ezequ/OneDrive - Fundacao Getulio Vargas - FGV/Mentoria/",
"joint-models-in-stan", sep = ""))
setwd(paste("C:/Documents/Graduacao/FGV/IC/joint-models-in-stan/",
"joint-models-in-stan", sep = ""))
library("JMbayes")
install.packages('JMbayes')
library("JMbayes")
library("JMbayes")
install.packages('JMbayes')
install.packages('JMbayes')
library("JMbayes")
library("lattice")
pbc2$status2 <- as.numeric(pbc2$status != "alive")
pbc2.id$status2 <- as.numeric(pbc2.id$status != "alive")
sfit <- survfit(Surv(years, status2) ~ drug, data = pbc2.id)
plot(sfit, lty = 1:2, lwd = 2, col = 1:2, mark.time = FALSE,
xlab = "Time (years)", ylab = "Transplantation-free Survival")
legend("topright", levels(pbc2.id$drug), lty = 1:2, col = 1:2, lwd = 2, cex = 1:3, bty = "n")
pbc2$status2f <- factor(pbc2$status2, levels = 0:1,
labels = c("alive", "transplanted/dead"))
xyplot(log(serBilir) ~ year | status2f, group = id, data = pbc2,
panel = function(x, y, ...) {
panel.xyplot(x, y, type = "l", col = 1, ...)
panel.loess(x, y, col = 2, lwd = 2)
}, xlab = "Time (years)", ylab = "log(serum Bilirubin)")
library("JMbayes")
library("lattice")
pbc2$status2 <- as.numeric(pbc2$status != "alive")
pbc2.id$status2 <- as.numeric(pbc2.id$status != "alive")
sfit <- survfit(Surv(years, status2) ~ drug, data = pbc2.id)
plot(sfit, lty = 1:2, lwd = 2, col = 1:2, mark.time = FALSE,
xlab = "Time (years)", ylab = "Transplantation-free Survival")
legend("topright", levels(pbc2.id$drug), lty = 1:2, col = 1:2, lwd = 2, cex = 1:3, bty = "n")
pbc2$status2f <- factor(pbc2$status2, levels = 0:1,
labels = c("alive", "transplanted/dead"))
xyplot(log(serBilir) ~ year | status2f, group = id, data = pbc2,
panel = function(x, y, ...) {
panel.xyplot(x, y, type = "l", col = 1, ...)
panel.loess(x, y, col = 2, lwd = 2)
}, xlab = "Time (years)", ylab = "log(serum Bilirubin)")
library("JMbayes")
library("lattice")
pbc2$status2 <- as.numeric(pbc2$status != "alive")
pbc2.id$status2 <- as.numeric(pbc2.id$status != "alive")
sfit <- survfit(Surv(years, status2) ~ drug, data = pbc2.id)
plot(sfit, lty = 1:2, lwd = 2, col = 1:2, mark.time = FALSE,
xlab = "Time (years)", ylab = "Transplantation-free Survival")
legend("topright", levels(pbc2.id$drug), lty = 1:2, col = 1:2, lwd = 2, cex = 1.3, bty = "n")
pbc2$status2f <- factor(pbc2$status2, levels = 0:1,
labels = c("alive", "transplanted/dead"))
xyplot(log(serBilir) ~ year | status2f, group = id, data = pbc2,
panel = function(x, y, ...) {
panel.xyplot(x, y, type = "l", col = 1, ...)
panel.loess(x, y, col = 2, lwd = 2)
}, xlab = "Time (years)", ylab = "log(serum Bilirubin)")
lmeFit.pbc1 <- lme(log(serBilir) ~ ns(year, 2), data = pbc2,
random = ~ ns(year, 2) | id)
splines
library('splines')
lmeFit.pbc1 <- lme(log(serBilir) ~ ns(year, 2), data = pbc2,
random = ~ ns(year, 2) | id)
coxFit.pbc1 <- coxph(Surv(years, status2) ~ drug * age, data = pbc2.id,
x = TRUE)
jointFit.pbc1 <- jointModelBayes(lmeFit.pbc1, coxFit.pbc1,
timeVar = "year", n.iter = 30000)
summary(jointFit.pbc1, include.baseHazCoefs = TRUE)
# Carregando o pacote
library(readxl)
library(lmtest)
library(sandwich)
library(ARDL)
# Instalando o pacote readxl
install.packages("readxl")
install.packages("lmtest")
install.packages("sandwich")
install.packages('ARDL')
# Carregando o pacote
library(readxl)
library(lmtest)
library(sandwich)
library(ARDL)
install.packages("ARDL", dependencies = TRUE)
library(sandwich)
library(ARDL)
library(ARDL)
# Importar a planilha pro R
dados <- read_excel("C:/Users/pontu/Documents/cursos/Intro Ec_tria IE/dados dem import 2018.xlsx", sheet = "Dados para regressao")
setwd(paste("/home/kalil/Documents/Graduacao/FGV/IC/",
"joint-models-in-stan", sep = "/"))
install.packages('ARDL')
# Carregando o pacote
library(readxl)
library(lmtest)
library(sandwich)
library(ARDL)
setwd(paste("/home/kalil/Documents/Graduacao/FGV/IC/",
"joint-models-in-stan", sep = "/"))
# Importar a planilha pro R
dados <- read_excel("./dados dem import 2018.xlsx", sheet = "Dados para regressao")
# Importar a planilha pro R
dados <- read_excel("./DDMv2.xlsx", sheet = "Dados para regressao")
# Importar a planilha pro R
dados <- read_excel("DDMv2.xlsx", sheet = "Dados para regressao")
setwd(paste("/home/kalil/Documents/Graduacao/UFRJ/MicroEconometria", sep = "/"))
# Importar a planilha pro R
dados <- read_excel("DDMv2.xlsx", sheet = "Dados para regressao")
",
setwd(paste("/home/kalil/Documents/Graduacao/UFRJ/MicroEconometria", sep = "/"))
# Importar a planilha pro R
dados <- read_excel("./DDMv2.xlsx", sheet = "Dados para regressao")
setwd(paste("/home/kalil/Documents/Graduacao/UFRJ/",
"MicroEconometria", sep = "/"))
# Importar a planilha pro R
dados <- read_excel("DDMv2.xlsx", sheet = "Dados para regressao")
# Importar a planilha pro R
dados <- read_excel("./DDMv2.xlsx", sheet = "Dados para regressao")
# Importar a planilha pro R
dados <- read_excel("./DDMv2.xls", sheet = "Dados para regressao")
# Importar a planilha pro R
dados <- read_excel("./DDMv2.xls")
# Pegando cada variavel separadamente
M <- dados$M
Y <- dados$Y
Er <- dados$Er
